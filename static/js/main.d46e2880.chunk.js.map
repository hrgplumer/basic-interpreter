{"version":3,"sources":["interpreter/basic.js","interpreter/BasicRunner.js","hooks/useTerminalEvents.js","App.js","serviceWorker.js","index.js"],"names":["Token","text","type","this","toString","getType","getText","is_number","m","is_space","c","is_digit","is_digit_in_base","base","d","toUpperCase","is_alpha","is_alnum","Tokenizer","input","error","tokens","Array","current_token","last_token","reset","hasMoreTokens","length","nextToken","lastToken","currentToken","addToken","t","isError","tokenize","keywords","functions","i","next","start","number","substring","identifier","r","match","n","str","parseInt","result","acceptText","will_acceptText","unaccept","will_accept","accept","expect","Line","linenumber","statements","setStatements","Node","children","addChild","level","undefined","space","Variable","name","value","bounds","mult","setBounds","dbounds","val","getDimension","compute_pos","indices","pos","inBounds","setValue","getValue","Random","seed","x0","Date","getTime","setSeed","s","random","Basic","lines","label_index","expand_if","dest","ifs","idx","line","uniq_pos","label_true","label_false","label_done","newif","push","thenpart","elsepart","flatten","j","stmt","tokenizer","lastText","processLine","l","getStatementsTree","atom","parseFloat","expression","x","unary_expr","node","mult_expr","opnode","rnode","plus_expr","relational","logical","child","end_of_statement","input_statement","self","q","query","ch","expr","dim_statement","get_rest_of_line","getStatement","rem_statement","goto_statement","randomize_statement","gosub_statement","return_statement","cls_statement","end_statement","for_statement","variable","limitexpr","stepexpr","data_statement","read_statement","next_statement","while_statement","wend_statement","clear_statement","if_statement","statement","gstatement","else_statement","gpart","ignore","print_statement","key_statement","let_statement","anode","k","stat","parse","parser","ifunctions","stop","variables","gosub_stack","for_stack","while_stack","for_info","debug_enabled","debug","document","console","writeln","print_function","number_input_function","string_input_function","clear_function","last_random","input_stack","last_point","data","data_pointer","push_input","v","get_array_indices","evalExpr","get_next_line","ensure_exist","setNumericValue","getNumericValue","expect_param","f","evalFunction","paramcount","Math","floor","String","fromCharCode","count","charCodeAt","abs","sin","sqrt","cos","tan","substr","indexOf","left","right","leftval","rightval","pow","last_input_var","prompt","pop","eol","assignment_statement","exprvalue","find_label","label","nidx","find_next","varname","len","nextlen","find_wend","loopvar","startval","end","endval","stepval","step","loop_info","lvar","limit","body","nextvar","done","dummy_statement","currentvar","run","resume_input","newidx","find_line_number","interpret","datacount","err","errstr","setParser","p","BasicRunner","terminalInput","printFunction","stringInputFunction","numericInputFunction","Parser","Interpreter","trim","interpreter","gatherInput","inputFunction","trace","useTerminalEvents","terminalText","setTerminalTextFunction","event","target","charCode","inputLines","split","last","toLowerCase","textToRun","endOfLine","prev","App","useState","setTerminalText","handleTerminalChange","handleTerminalKeyPress","className","id","spellCheck","aria-label","autoFocus","onChange","e","onKeyPress","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d46e2880.chunk.js","sourcesContent":["/*\r\n    Simple Web Basic Interpreter  (swbasic)\r\n    Copyright (C) 2010 Yohanes Nugroho\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n    initial creation: 2010-05-22 12:11:16\r\n    last update: Thu May 27 00:42:16 EDT 2010\r\n */\r\n\r\n\r\nfunction Token(text, type) {\r\n    this.text = text;\r\n    this.type = type;\r\n\r\n    this.toString = function () {\r\n        return \"[\" + this.text + \",\" + this.type + \"]\";\r\n    }\r\n\r\n    this.getType = function () {\r\n        return this.type;\r\n    }\r\n\r\n    this.getText = function () {\r\n        return this.text;\r\n    }\r\n}\r\n\r\nfunction is_number(m) {\r\n    return typeof (m) === \"number\" || typeof (m) === \"boolean\";\r\n}\r\n\r\nfunction is_space(c) {\r\n    return c === \" \" || c === \"\\t\" || c === \"\\v\" || c === \"\\f\";\r\n}\r\n\r\nfunction is_digit(c) {\r\n    return c >= '0' && c <= '9';\r\n}\r\n\r\nfunction is_digit_in_base(c, base) {\r\n    if (base === 10) {\r\n        return c >= '0' && c <= '9';\r\n    }\r\n    if (base === 8) {\r\n        return c >= '0' && c <= '7';\r\n    }\r\n    if (base === 16) {\r\n        var d = c.toUpperCase();\r\n        return (c >= '0' && c <= '9') || (d >= 'A' && d <= 'F');\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nfunction is_alpha(c) {\r\n    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\r\n}\r\n\r\nfunction is_alnum(c) {\r\n    return is_alpha(c) || is_digit(c);\r\n}\r\n\r\nfunction Tokenizer(input) {\r\n    var inp = input;\r\n    this.error = false;\r\n    this.tokens = new Array;\r\n\r\n    this.current_token = 0;\r\n\r\n    //last accepted token\r\n    this.last_token = null;\r\n\r\n    this.reset = function () {\r\n        this.current_token = 0;\r\n    };\r\n\r\n    this.hasMoreTokens = function () {\r\n        return (this.current_token < this.tokens.length);\r\n    };\r\n\r\n    this.nextToken = function () {\r\n        return this.tokens[this.current_token++];\r\n    };\r\n\r\n    this.lastToken = function () {\r\n        return this.last_token;\r\n    }\r\n\r\n    this.currentToken = function () {\r\n        return this.tokens[this.current_token];\r\n    }\r\n\r\n    this.addToken = function (t) {\r\n        this.tokens[this.tokens.length] = t;\r\n    };\r\n\r\n    this.isError = function () {\r\n        return this.error;\r\n    }\r\n\r\n    this.tokenize = function () {\r\n        var keywords = /^(IF|THEN|ELSE|FOR|TO|STEP|GOTO|GOSUB|RETURN|NEXT|INPUT|LET|CLS|END|PRINT|DIM|DATA|READ|REM|END|OR|AND|MOD|WHILE|WEND|RANDOMIZE|SYSTEM|KEY|CLEAR)$/i;\r\n        var functions = /^(VAL|STR\\$|LEFT\\$|RIGHT\\$|MID\\$|LEN|RND|INT|INSTR|ABS|ASC|CHR\\$|SQR|STRING\\$|SIN|COS|TAN|TIMER)$/i;\r\n        var i = 0;\r\n        this.error = false;\r\n        while (i < input.length) {\r\n            var c = input[i];\r\n            var next;\r\n            if (i + 1 < input.length) {\r\n                next = input[i + 1];\r\n            } else {\r\n                next = -1;\r\n            }\r\n\r\n            if (c === \".\") {\r\n                var start = i;\r\n                i++;\r\n                c = input[i];\r\n                while (i < input.length && is_digit(c)) {\r\n                    i++;\r\n                    c = input[i];\r\n                }\r\n                var number = input.substring(start, i);\r\n                var t = new Token(number, \"NUMBER\");\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n\r\n            if (is_digit(c)) {\r\n                var start = i;\r\n                while (i < input.length && is_digit(c)) {\r\n                    i++;\r\n                    c = input[i];\r\n                }\r\n\r\n                if (i < input.length && c === \".\") {\r\n                    i++;\r\n                    c = input[i];\r\n                    while (i < input.length && is_digit(c)) {\r\n                        i++;\r\n                        c = input[i];\r\n                    }\r\n                } else if (i < input.length && c === \"E\") {\r\n                    i++;\r\n                    c = input[i];\r\n                    if (i < input.length && (c === \"+\" || c === \"-\")) {\r\n                        i++;\r\n                        c = input[i];\r\n                        while (i < input.length && is_digit(c)) {\r\n                            i++;\r\n                            c = input[i];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var number = input.substring(start, i);\r\n\r\n                if (c === \"#\" || c === \"!\") { //ignore 123#\r\n                    i++;\r\n                }\r\n\r\n                var t = new Token(number, \"NUMBER\");\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n\r\n            if (c === \"&\") {\r\n                var base = 8;\r\n                var start = i + 1;\r\n                if (next.toUpperCase() === \"H\") {\r\n                    base = 16;\r\n                    i += 2;\r\n                    start++;\r\n                } else if (next.toUpperCase() === \"O\") {\r\n                    i += 2;\r\n                    start++;\r\n                }\r\n\r\n                if (i < input.length) c = input[i];\r\n                else c = -1;\r\n\r\n                while (i < input.length && is_digit_in_base(c, base)) {\r\n                    i++;\r\n                    c = input[i];\r\n                }\r\n                var number = input.substring(start, i);\r\n                var n = parseInt(number, base);\r\n                var t = new Token(n.toString(), \"NUMBER\");\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n\r\n            if (is_alpha(c)) {\r\n                var start = i;\r\n                while (i < input.length && is_alnum(c)) {\r\n                    i++;\r\n                    c = input[i];\r\n                }\r\n\r\n                if (c === \"$\" || c === \"!\" || c === \"#\" || c === \"%\") {\r\n                    i++;\r\n                }\r\n\r\n                let identifier = input.substring(start, i);\r\n                let r = identifier.match(keywords);\r\n                if (r && r[0]) {\r\n                    var n = identifier.toUpperCase();\r\n                    if (n === \"OR\" || n === \"AND\") {\r\n                        t = new Token(n, \"LOGICAL_OPERATOR\");\r\n                    } else if (n === \"MOD\") {\r\n                        t = new Token(n, \"MULT_OPERATOR\");\r\n                    } else {\r\n                        t = new Token(identifier.toUpperCase(), \"KEYWORD\");\r\n                    }\r\n                } else {\r\n                    r = identifier.match(functions);\r\n                    if (r && r[0]) {\r\n                        t = new Token(identifier.toUpperCase(), \"FUNCTION\");\r\n                    } else {\r\n                        t = new Token(identifier, \"IDENTIFIER\");\r\n                    }\r\n                }\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n\r\n            if (c === \"\\\"\") {\r\n                var start = i;\r\n                i++;\r\n                if (i >= input.length) {\r\n                    this.error = true;\r\n                    break;\r\n                }\r\n                c = input[i];\r\n                while (i < input.length && c != \"\\\"\") {\r\n                    i++;\r\n                    c = input[i];\r\n                }\r\n                if (c != \"\\\"\") {\r\n                    this.error = true;\r\n                    break;\r\n                }\r\n                i++;\r\n                var str = input.substring(start, i);\r\n                var t = new Token(str.substring(1, str.length - 1), \"STRING\");\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n            if (is_space(c)) {\r\n                while (i < input.length && is_space(c)) {\r\n                    i++;\r\n                    c = input[i];\r\n                }\r\n                continue;\r\n            }\r\n\r\n            if (c === \"*\" || c === \"/\" || c === \"^\" || c === \"\\\\\") {\r\n                i++;\r\n                var t = new Token(c, \"MULT_OPERATOR\");\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n\r\n            if (c === \"(\") {\r\n                i++;\r\n                var t = new Token(c, \"OPENPAREN\");\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n\r\n            if (c === \")\") {\r\n                i++;\r\n                var t = new Token(c, \"CLOSEPAREN\");\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n\r\n            if (c === \"+\" || c === \"-\") {\r\n                i++;\r\n                var t = new Token(c, \"PLUS_OPERATOR\");\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n\r\n            if (c === \"'\") {\r\n                i++;\r\n                var t = new Token(c, \"COMMENT\");\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n\r\n            if (c === \":\") {\r\n                i++;\r\n                var t = new Token(c, \"STATEMENT_DELIMITER\");\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n\r\n            if (c === \",\" || c === \";\") {\r\n                i++;\r\n                var t = new Token(c, \"DELIMITER\");\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n\r\n            if (c === \"=\") {\r\n                //actually ambiguous, might be equality testing\r\n                i++;\r\n                var t = new Token(c, \"ASSIGNMENT\");\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n\r\n            if (c === \">\" || c === \"<\") {\r\n                i++;\r\n                if (c === \"<\" && next === \">\") {\r\n                    i++;\r\n                    t = new Token(\"<>\", \"RELATIONAL\");\r\n                } else {\r\n                    if (next === '=') {\r\n                        i++;\r\n                        t = new Token(c + \"=\", \"RELATIONAL\");\r\n                    } else {\r\n                        t = new Token(c, \"RELATIONAL\");\r\n                    }\r\n                }\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n            if (c === \"\\r\" || c === \"\\n\") {\r\n                i++;\r\n                if (c === \"\\r\" && next === \"\\n\") {\r\n                    i++;\r\n                }\r\n                var t = new Token(\"--\", \"ENDOFLINE\");\r\n                this.addToken(t);\r\n                continue;\r\n            }\r\n\r\n            var t = new Token(c, \"CHARACTER\");\r\n            this.addToken(t);\r\n            i++;\r\n\r\n        }\r\n        if (this.error) throw (\"ERROR: \" + this.error);\r\n\r\n    }\r\n\r\n    this.toString = function () {\r\n        var result = \"current token: \" + this.current_token + \"\\n\";\r\n        for (let i = 0; i < this.tokens.length; i++) {\r\n            result += \"<\" + i + \"> \" + this.tokens[i].toString();\r\n            result += \"\\n\";\r\n        }\r\n        return result;\r\n    };\r\n\r\n\r\n    this.acceptText = function (text) {\r\n        if (!this.hasMoreTokens()) {\r\n            return false;\r\n        }\r\n        var t = this.tokens[this.current_token];\r\n        if (t.getText().toUpperCase() === text.toUpperCase()) {\r\n            this.last_token = t;\r\n            this.nextToken();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    this.will_acceptText = function (text) {\r\n        if (!this.hasMoreTokens()) {\r\n            return false;\r\n        }\r\n        var t = this.tokens[this.current_token];\r\n        if (t.getText().toUpperCase() === text.toUpperCase()) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    this.unaccept = function (type) {\r\n        if (this.current_token > 0)\r\n            this.current_token--;\r\n    }\r\n\r\n    /*like accept, but doesn't forward the token*/\r\n    this.will_accept = function (type) {\r\n        if (!this.hasMoreTokens()) {\r\n            return false;\r\n        }\r\n        var t = this.tokens[this.current_token];\r\n        if (t.getType() === type) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    this.accept = function (type) {\r\n        if (!this.hasMoreTokens()) {\r\n            return false;\r\n        }\r\n        var t = this.tokens[this.current_token];\r\n        if (t.getType() === type) {\r\n            this.last_token = t;\r\n            this.nextToken();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    this.expect = function (type) {\r\n        if (this.accept(type)) {\r\n            return;\r\n        }\r\n        if (!this.hasMoreTokens()) {\r\n            throw \"Error: expected '\" + type + \"' but end of token found\";\r\n        }\r\n        var t = this.tokens[this.current_token].getType();\r\n        throw \"Error: expected '\" + type + \"' but \" + t + \" found\";\r\n    }\r\n\r\n    this.tokenize();\r\n\r\n};\r\n\r\nfunction Line(number) {\r\n    this.linenumber = number;\r\n    this.statements = new Array;\r\n\r\n    this.setStatements = function (statements) {\r\n        this.statements = statements;\r\n    };\r\n\r\n    this.toString = function () {\r\n        var result = \"[ LINE# \" + this.linenumber + \"] \";\r\n        for (var i = 0; i < this.statements.length; i++) {\r\n            const s = this.statements[i];\r\n            result += \"ST >> \" + s.toString();\r\n        }\r\n        result += \"[END OF LINE# \" + this.linenumber + \"]\";\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction Node(type, text) {\r\n    this.type = type;\r\n    this.text = text;\r\n    this.children = new Array;\r\n\r\n    this.getText = function () {\r\n        return this.text;\r\n    }\r\n\r\n    this.getType = function () {\r\n        return this.type;\r\n    }\r\n\r\n    this.addChild = function (c) {\r\n        this.children[this.children.length] = c;\r\n    }\r\n\r\n    this.toString = function (level) {\r\n        if (level === undefined)\r\n            level = 0;\r\n\r\n        var space = \"\";\r\n        for (var i = 0; i < level; i++) {\r\n            space += \" \";\r\n        }\r\n\r\n        var result = space + \"TYPE = <\" + this.type + \"> \";\r\n        if (this.text !== undefined) {\r\n            result += \"TEXT = \" + this.text;\r\n        }\r\n        result += \"\\n\";\r\n        for (var i = 0; i < this.children.length; i++) {\r\n            result += this.children[i].toString(level + 1);\r\n        }\r\n        result += \"\\n\";\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\nfunction Parser(text) {\r\n    this.text = text;\r\n\r\n    /*code that has line numbers goes here*/\r\n    this.lines = new Array;\r\n\r\n    /*list of statements (flattened) */\r\n    this.statements = new Array;\r\n    this.label_index = new Array;\r\n\r\n    /*idx is for generating unique labels*/\r\n    this.expand_if = function (dest, ifs, idx, line) {\r\n        /*convert IF A THEN B ELSE C to\r\n          IF A THEN GOTO A_TRUE\r\n          ELSE GOTO A_FALSE\r\n          A_TRUE:\r\n          THEN_STATEMENTS\r\n          GOTO DONE\r\n          A_FALSE:\r\n          ELSE_STATEMENTS\r\n          DONE:\r\n         */\r\n        /**\r\n           for IF GOTO, don't change\r\n         */\r\n        if (ifs.children[1].getType() === \"GOTO\") {\r\n            dest.push(ifs);\r\n            return;\r\n        }\r\n        if (ifs.children[1].getType() === \"GOSUB\") {\r\n            dest.push(ifs);\r\n            return;\r\n        }\r\n\r\n        var uniq_pos = line + \"_\" + idx;\r\n\r\n        var label_true = uniq_pos + \"_TRUE\";\r\n        var label_false = uniq_pos + \"_FALSE\";\r\n        var label_done = uniq_pos + \"_DONE\";\r\n        var newif = new Node(\"IF\");\r\n        newif.addChild(ifs.children[0]);\r\n        newif.addChild(new Node(\"GOTO\", label_true));\r\n        if (ifs.children.length === 3) {\r\n            //only if there is else part\r\n            newif.addChild(new Node(\"GOTO\", label_false));\r\n        } else {\r\n            newif.addChild(new Node(\"GOTO\", label_done));\r\n        }\r\n        dest.push(newif);\r\n        dest.push(new Node(\"LINENUMBER\", label_true));\r\n        //add all children of THEN\r\n        var thenpart = ifs.children[1];\r\n\r\n        for (var i = 0; i < thenpart.children.length; i++) {\r\n            dest.push(thenpart.children[i]);\r\n        }\r\n        //have else part\r\n        if (ifs.children.length === 3) {\r\n            dest.push(new Node(\"GOTO\", label_done));\r\n            var elsepart = ifs.children[2];\r\n            dest.push(new Node(\"LINENUMBER\", label_false));\r\n            for (var i = 0; i < elsepart.children.length; i++) {\r\n                dest.push(elsepart.children[i]);\r\n            }\r\n        }\r\n        dest.push(new Node(\"LINENUMBER\", label_done));\r\n    }\r\n\r\n    this.flatten = function () {\r\n        for (var i = 0; i < this.lines.length; i++) {\r\n            var line = this.lines[i];\r\n            this.statements.push(new Node(\"LINENUMBER\", line.linenumber));\r\n            for (var j = 0; j < line.statements.length; j++) {\r\n                var stmt = line.statements[j];\r\n                if (stmt.getType() === \"IF\") {\r\n                    this.expand_if(this.statements, stmt, j, i);\r\n                } else {\r\n                    this.statements.push(stmt);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        for (var i = 0; i < this.statements.length; i++) {\r\n            var stmt = this.statements[i];\r\n            if (stmt.getType() === \"LINENUMBER\") {\r\n                if (this.label_index[stmt.getText()] === undefined) {\r\n                    this.label_index[stmt.getText()] = i;\r\n                } else {\r\n                    throw \"ERROR: duplicate line number \" + stmt.getText();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    this.functions = new Array;\r\n\r\n    this.tokenizer = null;\r\n\r\n    this.accept = function (t) {\r\n        return this.tokenizer.accept(t);\r\n    };\r\n\r\n    this.will_accept = function (t) {\r\n        return this.tokenizer.will_accept(t);\r\n    };\r\n\r\n    this.will_acceptText = function (t) {\r\n        return this.tokenizer.will_acceptText(t);\r\n    }\r\n\r\n    this.hasMoreTokens = function () {\r\n        return this.tokenizer.hasMoreTokens();\r\n    };\r\n\r\n    this.acceptText = function (t) {\r\n        return this.tokenizer.acceptText(t);\r\n    };\r\n\r\n\r\n    this.lastText = function () {\r\n        var x = this.tokenizer.lastToken();\r\n        return x.getText();\r\n    }\r\n\r\n    this.processLine = function (t) {\r\n        const linenum = parseInt(t.getText());\r\n        const l = new Line(linenum);\r\n        l.setStatements(this.getStatementsTree());\r\n        this.lines[this.lines.length] = l;\r\n    };\r\n\r\n    this.toString = function () {\r\n        var result = \"***\\n\";\r\n        for (var i = 0; i < this.lines.length; i++) {\r\n            const line = this.lines[i];\r\n            result += line.toString();\r\n            result += \"---\\n\";\r\n        }\r\n        return result;\r\n    }\r\n\r\n    this.atom = function () {\r\n        if (this.accept(\"NUMBER\")) {\r\n            return new Node(\"NUMBER\", parseFloat(this.lastText()));\r\n        } else if (this.will_accept(\"IDENTIFIER\")) {\r\n            return this.identifier();\r\n        } else if (this.will_accept(\"FUNCTION\")) {\r\n            /*function is just like identifier*/\r\n            var n = this.identifier();\r\n            n.type = \"FUNCTION\";\r\n            return n;\r\n        } else if (this.accept(\"STRING\")) {\r\n            return new Node(\"STRING\", this.lastText());\r\n        } else if (this.accept(\"OPENPAREN\")) {\r\n            var c = this.expression();\r\n            this.accept(\"CLOSEPAREN\")\r\n            return c;\r\n        }\r\n        var x = this.tokenizer.currentToken();\r\n        if (x === undefined) {\r\n            throw \"ERROR: unexpected end of tokens\";\r\n        }\r\n        throw \"ERROR: unexpected token \" + x.getType() + \" (\" + x.getText() + \")\";\r\n    }\r\n\r\n    this.unary_expr = function () {\r\n        if (this.acceptText(\"+\")) {\r\n            var node = new Node(\"UNARY_PLUS\");\r\n            node.addChild(this.atom());\r\n            return node;\r\n        }\r\n        if (this.acceptText(\"-\")) {\r\n            var node = new Node(\"UNARY_MINUS\");\r\n            node.addChild(this.atom());\r\n            return node;\r\n        }\r\n        return this.atom();\r\n    }\r\n\r\n    this.mult_expr = function () {\r\n        let node = this.unary_expr();\r\n        // x -> (x)\r\n        // 1*2/3  1-> (/ (* 1 2) 3)\r\n        while (this.accept(\"MULT_OPERATOR\")) {\r\n            var opnode = new Node(this.lastText());\r\n            opnode.addChild(node);\r\n            var rnode = this.unary_expr();\r\n            opnode.addChild(rnode);\r\n            node = opnode;\r\n        }\r\n        return node;\r\n    }\r\n\r\n    this.plus_expr = function () {\r\n        var node = this.mult_expr();\r\n        while (this.accept(\"PLUS_OPERATOR\")) {\r\n            var opnode = new Node(this.lastText());\r\n            opnode.addChild(node);\r\n            var rnode = this.mult_expr();\r\n            opnode.addChild(rnode);\r\n            node = opnode;\r\n        }\r\n        return node;\r\n    }\r\n\r\n\r\n    this.relational = function () {\r\n        var node = this.plus_expr();\r\n\r\n        while (this.accept(\"RELATIONAL\") || this.acceptText(\"=\")) {\r\n            var opnode = new Node(this.lastText());\r\n            opnode.addChild(node);\r\n            var rnode = this.plus_expr();\r\n            opnode.addChild(rnode);\r\n            node = opnode;\r\n        }\r\n        return node;\r\n    };\r\n\r\n\r\n    this.logical = function () {\r\n        var node = this.relational();\r\n        while (this.accept(\"LOGICAL_OPERATOR\")) {\r\n            var opnode = new Node(this.lastText());\r\n            opnode.addChild(node);\r\n            var rnode = this.relational();\r\n            opnode.addChild(rnode);\r\n            node = opnode;\r\n        }\r\n        return node;\r\n    };\r\n\r\n    this.expression = function () {\r\n        var node = new Node(\"EXPRESSION\");\r\n        var child = this.logical();\r\n        node.addChild(child);\r\n        return node;\r\n    };\r\n\r\n\r\n    this.end_of_statement = function () {\r\n        if (this.will_accept(\"ENDOFLINE\") ||\r\n            this.will_accept(\"STATEMENT_DELIMITER\") ||\r\n            this.will_acceptText(\"ELSE\") ||\r\n            this.will_accept(\"COMMENT\")) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    this.input_statement = function (self) {\r\n        var node = new Node(\"INPUT\");\r\n\r\n        var q = \"?\";\r\n        if (self.accept(\"STRING\")) {\r\n            q = self.lastText();\r\n        }\r\n        var query = new Node(\"STRING\", q);\r\n\r\n        node.addChild(query);\r\n\r\n        while (self.hasMoreTokens()) {\r\n            if (self.end_of_statement())\r\n                break;\r\n\r\n            if (self.tokenizer.accept(\"KEYWORD\")) {\r\n                throw \"ERROR: unexpected keyword \" + self.lastText();\r\n            }\r\n\r\n            if (self.tokenizer.accept(\"DELIMITER\")) {\r\n                continue;\r\n            }\r\n            var ch = self.identifier();\r\n            node.addChild(ch);\r\n        }\r\n        return node;\r\n    }\r\n\r\n    this.identifier = function () {\r\n        var node = new Node(\"VARIABLE\");\r\n        if (!this.accept(\"IDENTIFIER\")) {\r\n            this.accept(\"FUNCTION\");\r\n        }\r\n        node.text = this.lastText();\r\n        if (this.accept(\"OPENPAREN\")) {\r\n            node.type = \"ARRAY\";\r\n            while (this.hasMoreTokens()) {\r\n                var expr = this.expression();\r\n                node.addChild(expr);\r\n                if (this.acceptText(\",\")) {\r\n                    continue;\r\n                }\r\n                if (this.accept(\"CLOSEPAREN\")) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n\r\n    this.dim_statement = function (self) {\r\n        var node = new Node(\"DIM\");\r\n        if (self.will_accept(\"IDENTIFIER\")) {\r\n            while (self.hasMoreTokens()) {\r\n                var child = self.identifier();\r\n                child.type = \"ARRAY\";\r\n                node.addChild(child);\r\n                if (self.acceptText(\",\")) {\r\n                    continue;\r\n                }\r\n                if (self.end_of_statement()) {\r\n                    break;\r\n                }\r\n            }\r\n            return node;\r\n        }\r\n        throw \"ERROR: expected identifer after DIM\";\r\n    }\r\n\r\n    /**\r\n     * For IF statement, if there is no else after the THEN, then\r\n     * all statements before end of line is included in THEN part\r\n     * if there is ELSE then the rest of the line goes to the ELSE part\r\n     */\r\n    this.get_rest_of_line = function (node) {\r\n        /*if not end of token*/\r\n\r\n        while (this.hasMoreTokens() &&\r\n            !this.will_accept(\"ENDOFLINE\")) {\r\n            var s = this.getStatement();\r\n            node.addChild(s);\r\n            if (this.accept(\"STATEMENT_DELIMITER\"))\r\n                continue;\r\n        }\r\n    }\r\n\r\n    this.rem_statement = function (self) {\r\n        var node = new Node(\"REM\");\r\n        while (self.hasMoreTokens() &&\r\n            !self.will_accept(\"ENDOFLINE\")) {\r\n            self.tokenizer.nextToken();\r\n        }\r\n    }\r\n\r\n    this.goto_statement = function (self) {\r\n        var node = new Node(\"GOTO\");\r\n        if (self.accept(\"NUMBER\")) {\r\n            node.text = self.lastText();\r\n            return node;\r\n        }\r\n        throw \"ERROR: GOTO should be followed by number\";\r\n    }\r\n\r\n    this.randomize_statement = function (self) {\r\n        var node = new Node(\"RANDOMIZE\");\r\n        node.addChild(self.expression());\r\n        return node;\r\n        throw \"ERROR: RANDOMIZE should be followed by expression\";\r\n    }\r\n\r\n    this.gosub_statement = function (self) {\r\n        var node = new Node(\"GOSUB\");\r\n        if (self.accept(\"NUMBER\")) {\r\n            node.text = self.lastText();\r\n            return node;\r\n        }\r\n        throw \"ERROR: GOSUB should be followed by number\";\r\n    }\r\n\r\n    this.return_statement = function (self) {\r\n        var node = new Node(\"RETURN\");\r\n        return node;\r\n    }\r\n\r\n    this.cls_statement = function (self) {\r\n        var node = new Node(\"CLS\");\r\n        return node;\r\n    }\r\n\r\n    this.end_statement = function (self) {\r\n        var node = new Node(\"END\");\r\n        return node;\r\n    }\r\n\r\n    this.for_statement = function (self) {\r\n        var node = new Node(\"FOR\");\r\n        if (!self.accept(\"IDENTIFIER\")) {\r\n            throw \"ERROR: expected identifier in FOR statement\";\r\n        }\r\n\r\n        var variable = new Node(\"VARIABLE\");\r\n        variable.text = self.lastText();\r\n\r\n        if (!self.acceptText(\"=\")) {\r\n            throw \"ERROR: expected = \";\r\n        }\r\n        node.addChild(variable);\r\n        var expr = self.expression();\r\n        if (!self.acceptText(\"TO\")) {\r\n            throw \"ERROR: expected TO in FOR statement \";\r\n        }\r\n        node.addChild(expr);\r\n        var limitexpr = self.expression();\r\n        node.addChild(limitexpr);\r\n        if (self.acceptText(\"STEP\")) {\r\n            var stepexpr = self.expression();\r\n            node.addChild(stepexpr);\r\n        }\r\n        return node;\r\n    }\r\n\r\n    this.data_statement = function (self) {\r\n        var node = new Node(\"DATA\");\r\n        if (self.will_accept(\"NUMBER\") || self.will_accept(\"STRING\")) {\r\n            while (self.hasMoreTokens()) {\r\n                if (self.accept(\"NUMBER\")) {\r\n                    var text = self.lastText();\r\n                    if (!is_number(text))\r\n                        text = parseFloat(text);\r\n                    node.addChild(new Node(\"DATUM\", text));\r\n                } else if (self.accept(\"STRING\")) {\r\n                    node.addChild(new Node(\"DATUM\", self.lastText()));\r\n                } else {\r\n                    throw \"ERROR: unexpected token \" + self.lastText();\r\n                }\r\n                if (!self.acceptText(\",\"))\r\n                    break;\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n\r\n    this.read_statement = function (self) {\r\n        var node = new Node(\"READ\");\r\n        while (self.hasMoreTokens()) {\r\n            if (self.end_of_statement())\r\n                break;\r\n\r\n            if (self.tokenizer.accept(\"KEYWORD\")) {\r\n                throw \"ERROR: unexpected keyword \" + self.lastText();\r\n            }\r\n\r\n            if (self.tokenizer.accept(\"DELIMITER\")) {\r\n                continue;\r\n            }\r\n            var ch = self.identifier();\r\n            node.addChild(ch);\r\n        }\r\n        return node;\r\n    }\r\n\r\n    this.next_statement = function (self) {\r\n        var node = new Node(\"NEXT\");\r\n        if (self.accept(\"IDENTIFIER\")) {\r\n            while (self.hasMoreTokens()) {\r\n                node.addChild(new Node(\"IDENTIFIER\", self.lastText()));\r\n                if (!self.acceptText(\",\"))\r\n                    break;\r\n                if (!self.accept(\"IDENTIFIER\"))\r\n                    break;\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n\r\n    this.while_statement = function (self) {\r\n        var node = new Node(\"WHILE\");\r\n        var expr = self.expression();\r\n        node.addChild(expr);\r\n        return node;\r\n    }\r\n\r\n    this.wend_statement = function (self) {\r\n        var node = new Node(\"WEND\");\r\n        return node;\r\n    }\r\n\r\n    this.clear_statement = function (self) {\r\n        var node = new Node(\"CLEAR\");\r\n        return node;\r\n    }\r\n\r\n    this.if_statement = function (self) {\r\n        var node = new Node(\"IF\");\r\n        var expr = self.expression();\r\n        node.addChild(expr);\r\n\r\n        if (self.acceptText(\"THEN\")) {\r\n\r\n\r\n            var thenpart = new Node(\"THEN\");\r\n            var statement = null;\r\n\r\n            if (self.will_accept(\"NUMBER\")) {\r\n                self.accept(\"NUMBER\");\r\n                statement = new Node(\"GOTO\");\r\n                statement.text = self.lastText();\r\n            } else {\r\n                /*get one statement */\r\n                statement = self.getStatement();\r\n            }\r\n            thenpart.addChild(statement);\r\n            node.addChild(thenpart);\r\n\r\n            if (self.acceptText(\"ELSE\")) {\r\n                var elsepart = new Node(\"ELSE\");\r\n\r\n                if (self.will_accept(\"NUMBER\")) {\r\n                    self.accept(\"NUMBER\");\r\n                    var gstatement = new Node(\"GOTO\");\r\n                    gstatement.text = self.lastText();\r\n                    elsepart.addChild(gstatement);\r\n                } else {\r\n                    var else_statement = self.getStatement();\r\n                    self.accept(\"STATEMENT_DELIMITER\");\r\n                    elsepart.addChild(else_statement);\r\n                    self.get_rest_of_line(elsepart);\r\n                }\r\n                node.addChild(elsepart);\r\n                return node;\r\n            }\r\n            return node;\r\n        } else if (self.accept(\"GOTO\")) {\r\n\r\n            var gpart = new Node(\"GOTO\");\r\n\r\n            if (self.accept(\"NUMBER\")) {\r\n                gpart.text = self.lastText();\r\n                node.addChild(gpart);\r\n                //Ignore rest of line\r\n                var ignore = new Node(\"_\");\r\n                self.accept(\"STATEMENT_DELIMITER\");\r\n                self.get_rest_of_line(ignore);\r\n                return node;\r\n            } else {\r\n                throw \"ERROR: expected NUMBER after GOTO\";\r\n            }\r\n            self.accept(\"STATEMENT_DELIMITER\");\r\n            self.get_rest_of_line(thenpart);\r\n            return node;\r\n        }\r\n        throw \"ERROR: expected THEN or GOTO in IF statement\";\r\n    }\r\n\r\n    this.print_statement = function (self) {\r\n        var node = new Node(\"PRINT\");\r\n        while (self.hasMoreTokens()) {\r\n\r\n\r\n            if (self.end_of_statement())\r\n                break;\r\n\r\n            if (self.accept(\"KEYWORD\")) {\r\n                throw \"ERROR: unexpected keyword \" + self.lastText();\r\n            }\r\n            if (self.accept(\"DELIMITER\")) {\r\n                node.addChild(new Node(\"DELIMITER\", self.lastText()));\r\n            }\r\n\r\n            if (self.end_of_statement())\r\n                break;\r\n\r\n            var ch = self.expression();\r\n            node.addChild(ch);\r\n        }\r\n\r\n        return node;\r\n    };\r\n\r\n    this.key_statement = function (self) {\r\n        var node = new Node(\"KEY\");\r\n        if (self.acceptText(\"ON\") || self.acceptText(\"OFF\")) {\r\n            node.text = self.lastText();\r\n            return node;\r\n        }\r\n        throw \"ERROR: only supports KEY ON or KEY OFF\";\r\n    }\r\n\r\n\r\n    this.let_statement = function (self) {\r\n        var variable = self.identifier();\r\n\r\n        if (self.acceptText(\"=\")) {\r\n            var node = self.expression();\r\n            var anode = new Node(\"ASSIGNMENT\");\r\n            anode.addChild(variable);\r\n            anode.addChild(node);\r\n            return anode;\r\n        }\r\n        throw \"ERROR: expected '='\";\r\n    }\r\n\r\n    this.getStatement = function () {\r\n        if (this.accept(\"KEYWORD\")) {\r\n            var k = this.lastText().toUpperCase();\r\n            if (this.functions[k]) {\r\n                return this.functions[k](this);\r\n            }\r\n        }\r\n        if (this.accept(\"COMMENT\")) {\r\n            return this.functions[\"REM\"](this);\r\n        }\r\n\r\n        if (this.will_accept(\"IDENTIFIER\")) {\r\n            return this.let_statement(this);\r\n        }\r\n        throw \"ERROR: statement error \" + this.tokenizer;\r\n    }\r\n\r\n    this.getStatementsTree = function () {\r\n        if (!this.hasMoreTokens()) {\r\n            throw \"ERROR: unexpected end of program\";\r\n        }\r\n        var statements = new Array;\r\n        while (this.hasMoreTokens() && !this.accept(\"ENDOFLINE\")) {\r\n            var stat = this.getStatement();\r\n            if (stat !== undefined)\r\n                statements.push(stat);\r\n            this.accept(\"STATEMENT_DELIMITER\");\r\n            if (this.accept(\"COMMENT\")) {\r\n                while (this.hasMoreTokens() && !this.accept(\"ENDOFLINE\")) {\r\n                    this.tokenizer.nextToken();\r\n                }\r\n                //statements.push(new Node(\"REM\"));\r\n                break;\r\n            }\r\n        }\r\n        return statements;\r\n    }\r\n\r\n    this.parse = function () {\r\n        this.tokenizer = new Tokenizer(text);\r\n\r\n        while (this.hasMoreTokens()) {\r\n            this.accept(\"ENDOFLINE\");\r\n            var t = this.tokenizer.nextToken();\r\n            // TODO this might break things....\r\n            if (t && t.text.toUpperCase() === \"RUN\") {\r\n                continue;\r\n            }\r\n            if (t.getType() === \"NUMBER\") {\r\n                this.processLine(t);\r\n            } else {\r\n                throw \"ERROR: statement must start with line number\";\r\n            }\r\n            this.accept(\"ENDOFLINE\");\r\n        }\r\n        this.flatten();\r\n    }\r\n\r\n    this.functions[\"PRINT\"] = this.print_statement;\r\n    this.functions[\"INPUT\"] = this.input_statement;\r\n    this.functions[\"DIM\"] = this.dim_statement;\r\n    this.functions[\"IF\"] = this.if_statement;\r\n    this.functions[\"GOTO\"] = this.goto_statement;\r\n    this.functions[\"GOSUB\"] = this.gosub_statement;\r\n    this.functions[\"RETURN\"] = this.return_statement;\r\n    this.functions[\"END\"] = this.end_statement;\r\n    this.functions[\"SYSTEM\"] = this.end_statement; //this also ends program\r\n    this.functions[\"FOR\"] = this.for_statement;\r\n    this.functions[\"NEXT\"] = this.next_statement;\r\n    this.functions[\"LET\"] = this.let_statement;\r\n    this.functions[\"WHILE\"] = this.while_statement;\r\n    this.functions[\"WEND\"] = this.wend_statement;\r\n    this.functions[\"REM\"] = this.rem_statement;\r\n    this.functions[\"CLS\"] = this.cls_statement;\r\n    this.functions[\"RANDOMIZE\"] = this.randomize_statement;\r\n    this.functions[\"DATA\"] = this.data_statement;\r\n    this.functions[\"READ\"] = this.read_statement;\r\n    this.functions[\"KEY\"] = this.key_statement;\r\n    this.functions[\"CLEAR\"] = this.clear_statement;\r\n}\r\n\r\n/*variable name with [] means its an array */\r\nfunction Variable(name) {\r\n    this.name = name;\r\n    this.value = null;\r\n    this.bounds = null;\r\n    this.mult = null;\r\n\r\n    this.setBounds = function (dbounds) {\r\n        this.value = new Array;\r\n        this.bounds = new Array; /*a(4,3), bounds = 4,3*/\r\n        this.mult = new Array; /*a(4,3), mult 1,4*/\r\n\r\n        var m = 1;\r\n\r\n        for (var i = 0; i < dbounds.length; i++) {\r\n            this.bounds[i] = dbounds[i] + 1;\r\n            this.mult[i] = m;\r\n            m *= this.bounds[i];\r\n        }\r\n\r\n        var val;\r\n        if (name[name.length - 3] === \"$\") {\r\n            val = \"\";\r\n        } else {\r\n            val = 0;\r\n        }\r\n        for (var i = 0; i < m; i++) {\r\n            this.value[i] = val;\r\n        }\r\n\r\n    }\r\n\r\n    this.getDimension = function () {\r\n        return this.bounds === null ? 0 : this.bounds.length;\r\n    }\r\n\r\n    this.compute_pos = function (indices) {\r\n        var pos = 0;\r\n        for (var i = 0; i < indices.length; i++) {\r\n            pos += indices[i] * this.mult[i];\r\n        }\r\n        return pos;\r\n    }\r\n\r\n    this.inBounds = function (indices) {\r\n        if (indices.length != this.bounds.length)\r\n            return false;\r\n\r\n        for (var i = 0; i < indices.length; i++) {\r\n            if (indices[i] < 0 || indices[i] >= this.bounds[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    this.setValue = function (value, indices) {\r\n        if (indices === undefined) {\r\n            this.value = value;\r\n            return;\r\n        }\r\n        this.value[this.compute_pos(indices)] = value;\r\n    }\r\n\r\n    this.getValue = function (indices) {\r\n        if (indices === undefined) {\r\n            return this.value;\r\n        }\r\n        return this.value[this.compute_pos(indices)];\r\n    }\r\n}\r\n\r\n//http://support.microsoft.com/kb/28150\r\nfunction Random(seed) {\r\n    const a = 214013;\r\n    const c = 2531011;\r\n    const z = 1 << 24;\r\n\r\n    this.seed = seed; /*keep the initial seed*/\r\n    this.x0 = seed;\r\n\r\n    if (seed === undefined) {\r\n        this.seed = new Date().getTime();\r\n        this.x0 = this.seed;\r\n    }\r\n\r\n    this.setSeed = function (s) {\r\n        this.seed = s;\r\n        this.x0 = s;\r\n    }\r\n\r\n    this.random = function () {\r\n        this.x0 = (this.x0 * a + c) % (z);\r\n        return this.x0 / z;\r\n    }\r\n}\r\n\r\n\r\nfunction Interpreter(parser) {\r\n    this.parser = parser;\r\n    this.ifunctions = new Array;\r\n    this.stop = false;\r\n\r\n    this.variables = new Array;\r\n\r\n    this.gosub_stack = new Array;\r\n\r\n    this.for_stack = new Array;\r\n    this.while_stack = new Array;\r\n    this.for_info = new Array;\r\n\r\n    const MAX_GOSUB = 100;\r\n    const DEFAULT_ARRAY = 10;\r\n\r\n    var debug_enabled = false;\r\n\r\n    this.print_function = null;\r\n    this.number_input_function = null;\r\n    this.string_input_function = null;\r\n\r\n    this.clear_function = null;\r\n\r\n    this.random = new Random;\r\n\r\n    this.last_random = 0;\r\n\r\n    this.input_stack = new Array;\r\n\r\n    this.last_point = 0;\r\n\r\n    this.data = new Array;\r\n\r\n    this.data_pointer = 0;\r\n\r\n    this.push_input = function (v) {\r\n        this.input_stack.push(v);\r\n    }\r\n\r\n    function debug(text) {\r\n        if (debug_enabled) {\r\n            if (typeof (document) === \"undefined\") {\r\n                console.debug(text);\r\n            } else {\r\n                document.writeln(text);\r\n            }\r\n        }\r\n    }\r\n\r\n    this.get_array_indices = function (identifier) {\r\n        var indices = new Array;\r\n        for (var i = 0; i < identifier.children.length; i++) {\r\n            indices[i] = this.evalExpr(identifier.children[i]);\r\n        }\r\n        return indices;\r\n    }\r\n\r\n    this.get_next_line = function (i) {\r\n        return i + 1;\r\n    }\r\n\r\n    this.ensure_exist = function (identifier) {\r\n        var name = identifier.getText();\r\n        if (identifier.getType() === \"ARRAY\") {\r\n            name += \"[]\";\r\n            if (this.variables[name] === undefined) {\r\n                var v = new Variable(name);\r\n                var bounds = new Array;\r\n                bounds[0] = DEFAULT_ARRAY;\r\n                v.setBounds(bounds);\r\n                this.variables[name] = v;\r\n            }\r\n        } else {\r\n            if (this.variables[name] === undefined) {\r\n                var v = new Variable(name);\r\n                this.variables[name] = v;\r\n                if (name[name.length - 1] === \"$\") {\r\n                    v.setValue(\"\");\r\n                } else {\r\n                    v.setValue(0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    this.getValue = function (identifier) {\r\n        var name = identifier.getText();\r\n        this.ensure_exist(identifier);\r\n        if (identifier.getType() === \"ARRAY\") {\r\n            name += \"[]\";\r\n            var variable = this.variables[name];\r\n            var indices = this.get_array_indices(identifier);\r\n            if (!variable.inBounds(indices)) {\r\n                throw \"ERROR: subscript out of range\";\r\n            }\r\n            return variable.getValue(indices);\r\n        } else {\r\n            var variable = this.variables[name];\r\n            return variable.getValue();\r\n        }\r\n    }\r\n\r\n    this.setNumericValue = function (name, value) {\r\n        if (this.variables[name] === undefined) {\r\n            var v = new Variable(name);\r\n            this.variables[name] = v;\r\n            v.setValue(value);\r\n        }\r\n        var v = this.variables[name];\r\n        v.setValue(value);\r\n    }\r\n\r\n    this.getNumericValue = function (name, value) {\r\n        if (this.variables[name] === undefined) {\r\n            var v = new Variable(name);\r\n            this.variables[name] = v;\r\n            v.setValue(0);\r\n            return 0;\r\n        }\r\n        var v = this.variables[name];\r\n        debug(\"getnumeric '\" + name + \"' value = \" + v.getValue());\r\n        return v.getValue();\r\n    }\r\n\r\n    this.setValue = function (identifier, value) {\r\n        var name = identifier.getText();\r\n        this.ensure_exist(identifier);\r\n        if (identifier.getType() === \"ARRAY\") {\r\n            debug(\"SET VALUE array \" + value);\r\n            name += \"[]\";\r\n            var variable = this.variables[name];\r\n            debug(\"Name = \" + name);\r\n\r\n            var indices = this.get_array_indices(identifier);\r\n\r\n            if (!variable.inBounds(indices)) {\r\n                throw \"ERROR: subscript out of range\";\r\n            }\r\n            return variable.setValue(value, indices);\r\n        } else {\r\n            debug(\"SET VALUE \" + value);\r\n            var variable = this.variables[name];\r\n            variable.setValue(value);\r\n        }\r\n    }\r\n\r\n    this.expect_param = function (f, n, m) {\r\n        if (m === undefined) {\r\n            if (f.children.length != n) {\r\n                throw \"ERROR: function '\" + f.text +\r\n                \"' expects \" + n + \" parameter(s), but got \" +\r\n                f.children.length;\r\n            }\r\n        }\r\n\r\n        if (f.children.length < n || f.children.length > m) {\r\n            throw \"ERROR: function '\" + f.text +\r\n            \"' expects \" + n + \" to \" + m + \"parameters, but got \" +\r\n            f.children.length;\r\n        }\r\n    }\r\n\r\n    this.evalFunction = function (f) {\r\n        var name = f.getText();\r\n        debug(\"evalfunction \" + name + \" param count \" + f.children.length);\r\n        var paramcount = f.children.length;\r\n\r\n        //var functions = /^(RND)\\s*/i;\r\n\r\n        switch (name) {\r\n\r\n\r\n            case \"TIMER\":\r\n                this.expect_param(f, 0);\r\n                return new Math.floor(new Date().getTime() / 1000);\r\n\r\n            case \"RND\":\r\n                this.expect_param(f, 0, 1);\r\n                if (paramcount === 0) {\r\n                    this.last_random = this.random.random();\r\n                    return this.last_random;\r\n                } else {\r\n                    var n = this.evalExpr(f.children[0]);\r\n                    if (is_number(n)) {\r\n                        if (n != 0) {\r\n                            this.last_random = this.random.random();\r\n                        }\r\n                        return this.last_random;\r\n                    }\r\n                }\r\n                throw \"ERROR: type mismatch for function RND\";\r\n            case \"CHR$\":\r\n                this.expect_param(f, 1);\r\n                var val = this.evalExpr(f.children[0]);\r\n                if (is_number(val)) {\r\n                    return String.fromCharCode(val);\r\n                }\r\n                throw \"ERROR: type mismatch for function CHR$\";\r\n\r\n            case \"STRING$\":\r\n                this.expect_param(f, 2);\r\n                var count = this.evalExpr(f.children[0]);\r\n                if (is_number(count)) {\r\n                    var c = this.evalExpr(f.children[1]);\r\n                    var x = \"\";\r\n                    if (is_number(c)) {\r\n                        x = String.fromCharCode(c);\r\n                    } else {\r\n                        if (c.length < 1)\r\n                            throw \"ERROR: illegal function call for STRING$\";\r\n                        x = c[0];\r\n                    }\r\n                    var result = \"\";\r\n                    for (var i = 0; i < count; i++) {\r\n                        result += x;\r\n                    }\r\n                    return result;\r\n                }\r\n                throw \"ERROR: type mismatch for function STRING$\";\r\n            case \"ASC\":\r\n                this.expect_param(f, 1);\r\n                var val = this.evalExpr(f.children[0]);\r\n                if (typeof (val) === \"string\") {\r\n                    return val.charCodeAt(0);\r\n                }\r\n                throw \"ERROR: type mismatch for function ASC\";\r\n            case \"LEN\":\r\n                this.expect_param(f, 1);\r\n                var val = this.evalExpr(f.children[0]);\r\n                if (typeof (val) === \"string\") {\r\n                    return val.length;\r\n                }\r\n                throw \"ERROR: type mismatch for function LEN\";\r\n\r\n            case \"ABS\":\r\n                this.expect_param(f, 1);\r\n                var val = this.evalExpr(f.children[0]);\r\n                if (is_number(val)) {\r\n                    return Math.abs(val);\r\n                }\r\n                throw \"ERROR: type mismatch for function ABS\";\r\n            case \"INT\":\r\n                this.expect_param(f, 1);\r\n                var val = this.evalExpr(f.children[0]);\r\n                if (is_number(val)) {\r\n                    return Math.floor(val);\r\n                }\r\n                throw \"ERROR: type mismatch for function INT\";\r\n            case \"SIN\":\r\n                this.expect_param(f, 1);\r\n                var val = this.evalExpr(f.children[0]);\r\n                if (typeof (val) !== \"string\") {\r\n                    return Math.sin(val);\r\n                }\r\n                throw \"ERROR: type mismatch for function SIN\";\r\n            case \"SQR\":\r\n                this.expect_param(f, 1);\r\n                var val = this.evalExpr(f.children[0]);\r\n\r\n                if (is_number(val)) {\r\n                    return Math.sqrt(val);\r\n                }\r\n                throw \"ERROR: type mismatch for function SQR\";\r\n            case \"COS\":\r\n                this.expect_param(f, 1);\r\n                var val = this.evalExpr(f.children[0]);\r\n                if (is_number(val)) {\r\n                    return Math.cos(val);\r\n                }\r\n                throw \"ERROR: type mismatch for function COS\";\r\n            case \"TAN\":\r\n                this.expect_param(f, 1);\r\n                var val = this.evalExpr(f.children[0]);\r\n                if (is_number(val)) {\r\n                    return Math.tan(val);\r\n                }\r\n                throw \"ERROR: type mismatch for function TAN\";\r\n\r\n            case \"VAL\":\r\n                this.expect_param(f, 1);\r\n                var val = this.evalExpr(f.children[0]);\r\n                if (typeof (val) === \"string\") {\r\n                    return parseFloat(val);\r\n                }\r\n                throw \"ERROR: type mismatch for function VAL\";\r\n            case \"STR$\":\r\n                this.expect_param(f, 1);\r\n                var val = this.evalExpr(f.children[0]);\r\n                if (is_number(val)) {\r\n                    return val.toString();\r\n                }\r\n                throw \"ERROR: type mismatch for function STR$\";\r\n            case \"LEFT$\":\r\n                this.expect_param(f, 2);\r\n                var val = this.evalExpr(f.children[0]);\r\n                if (typeof (val) === \"string\") {\r\n                    var n = this.evalExpr(f.children[1]);\r\n                    if (is_number(n)) {\r\n                        return val.substring(0, n);\r\n                    }\r\n                }\r\n                throw \"ERROR: type mismatch for function LEFT$\";\r\n            case \"RIGHT$\":\r\n                this.expect_param(f, 2);\r\n                var val = this.evalExpr(f.children[0]);\r\n                if (typeof (val) === \"string\") {\r\n                    var n = this.evalExpr(f.children[1]);\r\n                    if (is_number(n)) {\r\n                        return val.substring(val.length - n);\r\n                    }\r\n                }\r\n                throw \"ERROR: type mismatch for function RIGHT$\";\r\n            case \"MID$\":\r\n                this.expect_param(f, 2, 3);\r\n                var val = this.evalExpr(f.children[0]);\r\n                if (typeof (val) === \"string\") {\r\n                    var n = this.evalExpr(f.children[1]);\r\n                    if (is_number(n)) {\r\n                        if (paramcount === 2) {\r\n                            return val.substring(n);\r\n                        }\r\n                        var m = this.evalExpr(f.children[2]);\r\n                        if (is_number(m)) {\r\n                            return val.substr(n - 1, m);\r\n                        }\r\n                    }\r\n                }\r\n                throw \"ERROR: type mismatch for function MID$\";\r\n            case \"INSTR\":\r\n                this.expect_param(f, 2, 3);\r\n                var val = this.evalExpr(f.children[0]);\r\n                if (typeof (val) === \"string\") {\r\n                    var substr = this.evalExpr(f.children[1]);\r\n                    if (typeof (substr) === \"string\") {\r\n                        return val.indexOf(substr) + 1;\r\n                    }\r\n                } else if (is_number(val)) {\r\n                    var start = val;\r\n                    var str = this.evalExpr(f.children[1]);\r\n                    if (typeof (str) === \"string\") {\r\n                        var substr = this.evalExpr(f.children[2]);\r\n                        if (typeof (substr) === \"string\") {\r\n                            return str.indexOf(substr) + 1;\r\n                        }\r\n                    }\r\n                }\r\n                throw \"ERROR: type mismatch for function INSTR\";\r\n        }\r\n    }\r\n\r\n    this.evalExpr = function (expr) {\r\n\r\n        var type = expr.getType();\r\n\r\n        if (type === \"EXPRESSION\") {\r\n            expr = expr.children[0];\r\n            type = expr.getType();\r\n        }\r\n\r\n        var text = expr.getText();\r\n        debug(\"EVAL TYPE = \" + type + \" TEXT \" + text);\r\n        if (type === \"STRING\")\r\n            return expr.getText();\r\n        if (type === \"NUMBER\") {\r\n            var t = expr.getText();\r\n            if (is_number(t))\r\n                return t;\r\n            if (t.indexOf(\".\") >= 0) {\r\n                return parseFloat(t);\r\n            } else {\r\n                return parseInt(t);\r\n            }\r\n        }\r\n\r\n        var left = expr.children[0];\r\n        var right = expr.children[1];\r\n        var leftval = undefined;\r\n        if (left !== undefined)\r\n            leftval = this.evalExpr(left);\r\n\r\n        var rightval = undefined;\r\n        if (right !== undefined)\r\n            rightval = this.evalExpr(right);\r\n\r\n        if (text === \"=\")\r\n            return leftval === rightval;\r\n\r\n        switch (type) {\r\n            case \"*\":\r\n                return leftval * rightval;\r\n            case \"^\":\r\n                return Math.pow(leftval, rightval);\r\n            case \"/\":\r\n                return leftval / rightval;\r\n            case \"\\\\\":\r\n                return leftval / rightval;\r\n            case \"+\":\r\n                return leftval + rightval;\r\n            case \"-\":\r\n                return leftval - rightval;\r\n            case \"=\":\r\n                return leftval === rightval;\r\n            case \">\":\r\n                return leftval > rightval;\r\n            case \"<\":\r\n                return leftval < rightval;\r\n            case \"<=\":\r\n                return leftval <= rightval;\r\n            case \">=\":\r\n                return leftval >= rightval;\r\n            case \"<>\":\r\n                return leftval != rightval;\r\n            case \"AND\":\r\n                return leftval & rightval;\r\n            case \"OR\":\r\n                return leftval | rightval;\r\n            case \"MOD\":\r\n                return leftval % rightval;\r\n            case \"UNARY_MINUS\":\r\n                return -leftval;\r\n            case \"FUNCTION\":\r\n                return this.evalFunction(expr);\r\n            default:\r\n                debug(\"VARIABLE: \" + text + \" expr \" + expr);\r\n                return this.getValue(expr);\r\n        }\r\n    }\r\n\r\n    this.last_input_var = 0;\r\n\r\n    this.read_statement = function (self, idx) {\r\n        var statement = self.parser.statements[idx];\r\n        var count = statement.children.length;\r\n        for (var i = 0; i < count; i++) {\r\n            var variable = statement.children[i];\r\n            var name = variable.text;\r\n            if (self.data_pointer > self.data.length) {\r\n                throw \"ERROR: READ without DATA\";\r\n            }\r\n            var value = self.data[self.data_pointer++].text;\r\n            self.setValue(variable, value);\r\n        }\r\n        return idx + 1;\r\n    }\r\n\r\n    this.input_statement = function (self, idx) {\r\n        var statement = self.parser.statements[idx];\r\n        var count = statement.children.length;\r\n        var prompt = statement.children[0].text;\r\n        if (self.print_function && self.last_input_var === 0) {\r\n            self.print_function(prompt, false);\r\n            self.last_input_var = 1;\r\n        }\r\n\r\n        for (var i = self.last_input_var; i < count; i++) {\r\n            var variable = statement.children[i];\r\n            var name = variable.text;\r\n            var value = null;\r\n            if (self.input_stack.length > 0) {\r\n                self.setValue(variable, self.input_stack.pop());\r\n                continue;\r\n            }\r\n\r\n            if (name[name.length - 1] === \"$\") {\r\n                if (self.string_input_function) {\r\n                    value = self.string_input_function(prompt);\r\n                } else {\r\n                    throw \"ERROR: string input function not defined\";\r\n                }\r\n            } else {\r\n                if (self.number_input_function) {\r\n                    value = self.number_input_function(prompt);\r\n                } else {\r\n                    throw \"ERROR: number input function not defined\";\r\n                }\r\n            }\r\n            if (value === null) {\r\n                self.last_input_var = i;\r\n                return -1; //pause until we get value for input\r\n            }\r\n\r\n            // Todo take this out if shit breaks: jrc 12/18/2019\r\n            if (value) {\r\n                self.setValue(variable, value);\r\n            }\r\n\r\n        }\r\n        if (self.print_function) {\r\n            self.print_function(\"\", true);\r\n        }\r\n\r\n        self.last_input_var = 0;\r\n        return idx + 1;\r\n    }\r\n\r\n    this.print_statement = function (self, idx) {\r\n        var statement = self.parser.statements[idx];\r\n        var count = statement.children.length;\r\n        debug(\"PRINTING \" + count);\r\n        var result = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            var child = statement.children[i];\r\n            if (child.getType() === \"EXPRESSION\") {\r\n                var res = self.evalExpr(child);\r\n                result += res;\r\n            }\r\n            if (child.getType() === \"DELIMITER\") {\r\n                var t = child.text;\r\n                if (t === \",\")\r\n                    result += \"   \";\r\n            }\r\n        }\r\n\r\n        var eol = true;\r\n\r\n        if (count > 0 && statement.children[count - 1].text === \";\") {\r\n            eol = false;\r\n        }\r\n\r\n        if (self.print_function)\r\n            self.print_function(result, eol);\r\n\r\n        return idx + 1;\r\n    }\r\n\r\n    this.cls_statement = function (self, idx) {\r\n        var statement = self.parser.statements[idx];\r\n        if (self.clear_function)\r\n            self.clear_function();\r\n        return idx + 1;\r\n    }\r\n\r\n    this.randomize_statement = function (self, idx) {\r\n        var statement = self.parser.statements[idx];\r\n        var v = self.evalExpr(statement.children[0]);\r\n        if (is_number(v)) {\r\n            this.random.setSeed(v);\r\n        } else {\r\n            throw \"ERROR: RANDOMIZE expects number as argument\";\r\n        }\r\n        return idx + 1;\r\n    }\r\n\r\n    this.assignment_statement = function (self, idx) {\r\n        var statement = self.parser.statements[idx];\r\n        var count = statement.children.length;\r\n        var variable = statement.children[0];\r\n        var expression = statement.children[1];\r\n        var exprvalue = self.evalExpr(expression);\r\n        self.setValue(variable, exprvalue);\r\n        return idx + 1;\r\n    }\r\n\r\n    this.find_label = function (label) {\r\n        var label_index = this.parser.label_index;\r\n        if (label_index[label] === undefined)\r\n            throw \"ERROR: goto destination \" + label + \" not found\";\r\n        debug(\"NEXT INDEX\" + label_index[label]);\r\n        return label_index[label];\r\n    }\r\n\r\n    this.if_statement = function (self, idx) {\r\n        var statement = self.parser.statements[idx];\r\n        var count = statement.children.length;\r\n\r\n        debug(\"IF \" + count + \" \" + statement.getText());\r\n        for (var i = 0; i < count; i++) {\r\n            debug(statement.children[i]);\r\n        }\r\n\r\n        var expression = statement.children[0];\r\n        var exprvalue = self.evalExpr(expression);\r\n        debug(exprvalue);\r\n        if (exprvalue) {\r\n            const thenpart = statement.children[1];\r\n            return self.find_label(thenpart.getText());\r\n        } else {\r\n            const elsepart = statement.children[2];\r\n            return self.find_label(elsepart.getText());\r\n        }\r\n        return idx + 1;\r\n    }\r\n\r\n    this.goto_statement = function (self, idx) {\r\n        var statement = self.parser.statements[idx];\r\n        var label = statement.getText();\r\n        return self.find_label(label);\r\n    }\r\n\r\n\r\n    this.gosub_statement = function (self, idx) {\r\n        var statement = self.parser.statements[idx];\r\n        var label = statement.getText();\r\n        self.gosub_stack.push(idx + 1);\r\n        if (self.gosub_stack.length > MAX_GOSUB) {\r\n            throw \"ERROR: GOSUB stack exceeded\";\r\n        }\r\n        return self.find_label(label);\r\n    }\r\n\r\n    this.return_statement = function (self, idx) {\r\n        if (self.gosub_stack.length === 0) {\r\n            throw \"ERROR: RETURN without GOSUB\";\r\n        }\r\n        var nidx = self.gosub_stack.pop();\r\n        debug(\"RETURN TO \" + nidx);\r\n        return nidx;\r\n    }\r\n\r\n    this.find_next = function (idx, varname) {\r\n        var len = this.parser.statements.length;\r\n        for (var i = idx + 1; i < len; i++) {\r\n            var statement = this.parser.statements[i];\r\n            if (statement.getType() === \"NEXT\") {\r\n                /*next without variable match with anything*/\r\n                if (statement.children.length === 0) {\r\n                    return i;\r\n                }\r\n                var nextlen = statement.children.length;\r\n                for (var j = 0; j < nextlen; j++) {\r\n                    if (statement.children[j].text === varname) {\r\n                        return i;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        throw \"ERROR: FOR without NEXT\";\r\n    }\r\n\r\n    this.find_wend = function (idx, varname) {\r\n        var len = this.parser.statements.length;\r\n        for (var i = idx + 1; i < len; i++) {\r\n            var statement = this.parser.statements[i];\r\n            if (statement.getType() === \"WEND\") {\r\n                return i;\r\n            }\r\n        }\r\n        throw \"ERROR: while without wend\";\r\n    }\r\n\r\n\r\n    this.while_statement = function (self, idx) {\r\n        var statement = self.parser.statements[idx];\r\n        var expression = statement.children[0];\r\n        var val = self.evalExpr(expression);\r\n        if (typeof (val) !== \"number\" && typeof (val) !== \"boolean\") {\r\n            throw \"ERROR: WHILE expression is not boolean\";\r\n        }\r\n        if (val) {\r\n            self.while_stack.push(idx);\r\n            return idx + 1;\r\n        } else {\r\n            var next = self.find_wend(idx);\r\n            return next + 1;\r\n        }\r\n    }\r\n\r\n    this.wend_statement = function (self, idx) {\r\n\r\n        if (self.while_stack.length === 0) {\r\n            throw \"ERROR:  WEND without while\";\r\n        }\r\n        var statement = self.parser.statements[idx];\r\n        var whilepos = self.while_stack.pop();\r\n        return whilepos;\r\n    }\r\n\r\n    this.for_statement = function (self, idx) {\r\n\r\n        var statement = self.parser.statements[idx];\r\n        var loopvar = statement.children[0].getText();\r\n        var start = statement.children[1];\r\n        var startval = self.evalExpr(start);\r\n\r\n        if (typeof (startval) !== \"number\") {\r\n            throw \"ERROR: FOR expression is not numeric\";\r\n        }\r\n\r\n        var end = statement.children[2];\r\n        var endval = self.evalExpr(end);\r\n\r\n        if (typeof (endval) !== \"number\") {\r\n            throw \"ERROR: TO expression is not numeric\";\r\n        }\r\n\r\n        var stepval = 1;\r\n        if (statement.children.length === 4) {\r\n            var step = statement.children[3];\r\n            stepval = self.evalExpr(step);\r\n        }\r\n\r\n        /*find the next*/\r\n        var next = self.find_next(idx, loopvar);\r\n\r\n        self.setNumericValue(loopvar, startval);\r\n\r\n        if (startval * stepval > endval) {\r\n            debug(\"SKIPPING LOOP\");\r\n            return next + 1;\r\n        }\r\n\r\n        var loop_info = {\r\n            \"lvar\": loopvar,\r\n            \"limit\": endval,\r\n            \"step\": stepval,\r\n            \"body\": idx + 1\r\n        };\r\n\r\n        self.for_info[idx] = loop_info;\r\n        self.for_stack.push(idx);\r\n        debug(\"start execute loop\");\r\n        return idx + 1; //start execute loop\r\n    }\r\n\r\n\r\n    this.next_statement = function (self, idx) {\r\n\r\n        if (self.for_stack.length === 0) {\r\n            throw \"ERROR: NEXT without FOR\";\r\n        }\r\n        var statement = self.parser.statements[idx];\r\n\r\n        var nidx = self.for_stack[self.for_stack.length - 1];\r\n        var loop_info = self.for_info[nidx];\r\n\r\n\r\n        var loopvar = loop_info.lvar;\r\n        debug(\"NEXT TO \" + nidx);\r\n\r\n        if (statement.children.length === 0) {\r\n            var val = self.getNumericValue(loopvar);\r\n            debug(\"val \" + val + \" STEP: \" + loop_info.step);\r\n            val += loop_info.step;\r\n            debug(\"valnow \" + val);\r\n            if (loop_info.step >= 0) {\r\n                if (val > loop_info.limit) {\r\n                    self.for_stack.pop();\r\n                    return idx + 1;\r\n                }\r\n            } else {\r\n                if (val < loop_info.limit) {\r\n                    self.for_stack.pop();\r\n                    return idx + 1;\r\n                }\r\n            }\r\n            self.setNumericValue(loopvar, val);\r\n            debug(\"back to \" + loop_info.body);\r\n            return loop_info.body;\r\n        }\r\n        var nextlen = statement.children.length;\r\n        for (var j = 0; j < nextlen; j++) {\r\n            var nextvar = statement.children[j].text;\r\n            if (nextvar === loopvar) {\r\n                var val = self.getNumericValue(loopvar);\r\n                val += loop_info.step;\r\n                var done = false\r\n                if (loop_info.step >= 0) {\r\n                    if (val > loop_info.limit)\r\n                        done = true;\r\n                } else {\r\n                    if (val < loop_info.limit)\r\n                        done = true;\r\n                }\r\n                if (done) {\r\n                    self.for_stack.pop();\r\n                    if (j === nextlen - 1) {\r\n                        return idx + 1;\r\n                    }\r\n                    if (self.for_stack.length === 0) {\r\n                        throw \"ERROR: NEXT without FOR\";\r\n                    }\r\n\r\n                    nidx = self.for_stack[self.for_stack.length - 1];\r\n                    loop_info = self.for_info[nidx];\r\n                    loopvar = loop_info.lvar;\r\n                    continue;\r\n                }\r\n                self.setNumericValue(loopvar, val);\r\n                return loop_info.body;\r\n            } else {\r\n                throw \"ERROR: Expected NEXT \" + loopvar + \" got NEXT \" + nextvar;\r\n            }\r\n        }\r\n\r\n        return nidx;\r\n    }\r\n\r\n    this.end_statement = function (self, idx) {\r\n        return self.parser.statements.length + 1;\r\n    }\r\n\r\n    this.data_statement = function (self, idx) {\r\n        var statement = self.parser.statements[idx];\r\n        return idx + 1;\r\n    }\r\n\r\n    this.dummy_statement = function (self, idx) {\r\n        return idx + 1;\r\n    }\r\n\r\n    this.clear_statement = function (self, idx) {\r\n        this.variables = new Array;\r\n        return idx + 1;\r\n    }\r\n\r\n    this.dim_statement = function (self, idx) {\r\n        debug(\"DIM DIMENSION\");\r\n        var statement = self.parser.statements[idx];\r\n        for (var i = 0; i < statement.children.length; i++) {\r\n            var currentvar = statement.children[i];\r\n            var name = currentvar.getText();\r\n            debug(\"DIM NAME \" + name);\r\n            name += \"[]\";\r\n            if (self.variables[name] === undefined) {\r\n                var v = new Variable(name);\r\n                var bounds = self.get_array_indices(currentvar);\r\n                debug(bounds);\r\n                v.setBounds(bounds);\r\n                self.variables[name] = v;\r\n            }\r\n        }\r\n        return idx + 1;\r\n    }\r\n\r\n    this.run = function (idx) {\r\n        var statement = this.parser.statements[idx];\r\n        debug(\"statement: \" + statement);\r\n        var type = statement.getType();\r\n        if (type === \"LINENUMBER\")\r\n            return idx + 1;\r\n        if (this.ifunctions[type] !== undefined) {\r\n            return this.ifunctions[type](this, idx);\r\n        }\r\n        return idx + 1;\r\n    }\r\n\r\n    this.resume_input = function () {\r\n        var len = this.parser.statements.length;\r\n        var idx = this.last_point;\r\n        this.stop = false;\r\n        while (!this.stop && idx < len) {\r\n            //debug(\"CURRENT = \" + idx);\r\n            var newidx = this.run(idx);\r\n            if (newidx === -1) {\r\n                this.last_point = idx;\r\n                break;\r\n            }\r\n            idx = newidx;\r\n        }\r\n        this.last_point = idx;\r\n    }\r\n\r\n    this.find_line_number = function (idx) {\r\n        var i = idx;\r\n        while (i >= 0) {\r\n            var statement = this.parser.statements[i];\r\n            var type = statement.getType();\r\n            if (type === \"LINENUMBER\")\r\n                return statement.text;\r\n            i--;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    this.interpret = function () {\r\n        debug(\"Interpreting\");\r\n\r\n        var len = this.parser.statements.length;\r\n        this.data = new Array;\r\n        this.data_pointer = 0;\r\n        this.variables = new Array;\r\n\r\n        for (var i = 0; i < len; i++) {\r\n            var statement = this.parser.statements[i];\r\n            if (statement.getType() === \"DATA\") {\r\n                var datacount = statement.children.length;\r\n                for (var j = 0; j < datacount; j++) {\r\n                    this.data.push(statement.children[j]);\r\n                }\r\n            }\r\n        }\r\n\r\n        var idx = 0;\r\n        this.stop = false;\r\n\r\n        this.last_input_var = 0;\r\n        debug_enabled = false;\r\n        if (debug_enabled) {\r\n            debug(\"CONTENT:-----\");\r\n            for (var i = 0; i < len; i++) {\r\n                debug(i + \" -- \" + this.parser.statements[i]);\r\n            }\r\n            debug(\"END OF CONTENT:-----\");\r\n        }\r\n        debug_enabled = false;\r\n\r\n        while (!this.stop && idx < len) {\r\n            //debug(\"CURRENT = \" + idx);\r\n            try {\r\n                var newidx = this.run(idx);\r\n            } catch (err) {\r\n                var errstr = \"LINE \" + this.find_line_number(idx) + \" \";\r\n                errstr += err;\r\n                throw errstr;\r\n            }\r\n            if (newidx === -1) {\r\n                this.last_point = idx;\r\n                break;\r\n            }\r\n            idx = newidx;\r\n        }\r\n        this.last_point = idx;\r\n    }\r\n\r\n    this.setParser = function (p) {\r\n        this.parser = p;\r\n    }\r\n\r\n    this.last_random = this.random.random();\r\n    this.ifunctions[\"PRINT\"] = this.print_statement;\r\n    this.ifunctions[\"INPUT\"] = this.input_statement;\r\n    this.ifunctions[\"ASSIGNMENT\"] = this.assignment_statement;\r\n    this.ifunctions[\"IF\"] = this.if_statement;\r\n    this.ifunctions[\"GOTO\"] = this.goto_statement;\r\n    this.ifunctions[\"GOSUB\"] = this.gosub_statement;\r\n    this.ifunctions[\"RETURN\"] = this.return_statement;\r\n    this.ifunctions[\"END\"] = this.end_statement;\r\n    this.ifunctions[\"DIM\"] = this.dim_statement;\r\n    this.ifunctions[\"FOR\"] = this.for_statement;\r\n    this.ifunctions[\"NEXT\"] = this.next_statement;\r\n    this.ifunctions[\"WHILE\"] = this.while_statement;\r\n    this.ifunctions[\"WEND\"] = this.wend_statement;\r\n    this.ifunctions[\"CLS\"] = this.cls_statement;\r\n    this.ifunctions[\"RANDOMIZE\"] = this.randomize_statement;\r\n    this.ifunctions[\"READ\"] = this.read_statement;\r\n    this.ifunctions[\"DATA\"] = this.data_statement;\r\n    this.ifunctions[\"KEY\"] = this.dummy_statement;\r\n    this.ifunctions[\"CLEAR\"] = this.clear_statement;\r\n}\r\n\r\nconst Basic = [Parser, Interpreter];\r\n\r\nexport default Basic;","import Basic from './basic';\r\n\r\nconst BasicRunner = (terminalInput, printFunction, stringInputFunction, numericInputFunction) => {\r\n    if (terminalInput.length <= 0)\r\n        return null;\r\n\r\n    const [Parser, Interpreter] = Basic;\r\n    const parser = new Parser(terminalInput.trim());\r\n    const interpreter = new Interpreter();\r\n\r\n    try {\r\n        parser.parse();\r\n        interpreter.setParser(parser);\r\n        interpreter.print_function = printFunction;\r\n\r\n        const gatherInput = (inputFunction) => {\r\n            const input = inputFunction();\r\n            interpreter.push_input(input);\r\n            try {\r\n                interpreter.resume_input();\r\n            } catch (error) {\r\n                console.trace(error);\r\n            }\r\n        }\r\n\r\n        interpreter.string_input_function = () => gatherInput(stringInputFunction);\r\n        interpreter.number_input_function = () => gatherInput(numericInputFunction);\r\n        interpreter.interpret();\r\n        return interpreter;\r\n    } catch (error) {\r\n        console.trace(error);\r\n        return error;\r\n    }\r\n}\r\n\r\n// Add stop, start methods using basic.js props\r\n\r\nexport default BasicRunner;","import BasicRunner from '../interpreter/BasicRunner';\r\n\r\nconst useTerminalEvents = (terminalText, setTerminalTextFunction) => {\r\n    const handleTerminalChange = (event) => {\r\n        const { name, value } = event.target;\r\n        if (name === 'terminal') {\r\n            setTerminalTextFunction(value);\r\n        }\r\n    }\r\n\r\n    const handleTerminalKeyPress = (event) => {\r\n        const { charCode } = event;\r\n        if (charCode === 13) { // enter key\r\n            // get last line of terminal\r\n            const inputLines = terminalText.split('\\n');\r\n            const last = inputLines.length > 0 ? inputLines[inputLines.length - 1] : '';\r\n            if (last.toLowerCase() === 'run') {\r\n                /* Run basic */\r\n                let textToRun = '';\r\n                for (let i = inputLines.length - 1; i >= 0; i--) {\r\n                    // Find text since last \"ready\" and only run that\r\n                    if (inputLines[i].match(/READY/g)) {\r\n                        break;\r\n                    }\r\n\r\n                    // Strip RUN out of text we send to the parser\r\n                    if (inputLines[i].match(/RUN/g)) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Ensure textToRun has no trailing \\n, because this will cause errors in parsing\r\n                    textToRun = i === inputLines.length - 1 ?\r\n                        inputLines[i] + textToRun :\r\n                        inputLines[i] + '\\n' + textToRun;\r\n                }\r\n\r\n                const basicInterpreter = BasicRunner(textToRun,\r\n                    (text, endOfLine) => { // print function\r\n                        setTerminalTextFunction(prev => {\r\n                            const newText = `${prev}\\n${text}${endOfLine ? '\\n' : ''}`\r\n                            return newText;\r\n                        })\r\n                    },\r\n                    () => { // string input function\r\n                        const input = prompt('Enter input:');\r\n                        return input;\r\n                    },\r\n                    () => { // numeric input function\r\n                        const number = prompt('Enter a number:');\r\n                        return parseFloat(number);\r\n                    }\r\n                );\r\n\r\n                // Append \"READY.\" to terminal after execution\r\n                setTerminalTextFunction(prev => prev + 'READY.');\r\n            }\r\n            else if (last.toLowerCase() === 'clear') {\r\n                setTerminalTextFunction('');\r\n            }\r\n        }\r\n    }\r\n\r\n    return [handleTerminalChange, handleTerminalKeyPress];\r\n}\r\n\r\nexport default useTerminalEvents;","import React, { useState } from 'react';\r\nimport useTerminalEvents from './hooks/useTerminalEvents';\r\nimport './App.css';\r\nimport './crt.css';\r\n\r\nconst App = () => {\r\n  const [terminalText, setTerminalText] = useState('');\r\n  const [handleTerminalChange, handleTerminalKeyPress] = useTerminalEvents(terminalText, setTerminalText);\r\n\r\n  return (\r\n    <main className=\"frame\">\r\n      <header>\r\n        <h1 className=\"heading\">**** Commodore 64 ****</h1>\r\n        <h1 className=\"heading\">64K ram system 38911 basic bytes free</h1>\r\n      </header>\r\n      <div id=\"terminal-container\">\r\n        <textarea\r\n          spellCheck=\"false\"\r\n          type=\"text\"\r\n          id=\"terminal\"\r\n          name=\"terminal\"\r\n          value={terminalText}\r\n          aria-label=\"terminal\"\r\n          autoFocus\r\n          onChange={(e) => handleTerminalChange(e)}\r\n          onKeyPress={(e) => handleTerminalKeyPress(e)} // Add another method here to capture input! Delete whatever it captures?\r\n        />\r\n      </div>\r\n      <div className=\"overlay\">AV-1</div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}